[{"path":"epiforecasts.io/EpiSoon/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Epiforecasts Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"epiforecasts.io/EpiSoon/articles/introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started","text":"vignette briefly outlines functionality EpiSoon. get started load required packages. Load package (bsts models, ggplot2 plotting, cowplot theming)","code":"library(EpiSoon) library(bsts) library(fable) library(cowplot) library(dplyr)"},{"path":"epiforecasts.io/EpiSoon/articles/introduction.html","id":"forecast-rts-score-and-plot","dir":"Articles","previous_headings":"","what":"Forecast Rts, score and plot","title":"Getting started","text":"use example dataframe built package replaced data. Fit bsts model produce Rt forecast. appropriately wrapped model can used (see bsts_model fable_model examples). Score forecast Summarise forecast scores Summarise forecast Plot forecast observed data","code":"EpiSoon::example_obs_rts #>          rt       date #> 1  2.490547 2020-03-01 #> 2  2.442588 2020-03-02 #> 3  2.402473 2020-03-03 #> 4  2.335572 2020-03-04 #> 5  2.266551 2020-03-05 #> 6  2.192293 2020-03-06 #> 7  2.146429 2020-03-07 #> 8  2.104371 2020-03-08 #> 9  2.059281 2020-03-09 #> 10 2.027134 2020-03-10 #> 11 2.014678 2020-03-11 #> 12 1.998946 2020-03-12 #> 13 1.968350 2020-03-13 #> 14 1.947376 2020-03-14 #> 15 1.906984 2020-03-15 #> 16 1.812842 2020-03-16 #> 17 1.718532 2020-03-17 #> 18 1.665646 2020-03-18 #> 19 1.639927 2020-03-19 #> 20 1.633795 2020-03-20 #> 21 1.682025 2020-03-21 #> 22 1.561653 2020-03-22 rt_forecast <- forecast_rt(EpiSoon::example_obs_rts[1:10, ],   model = function(...) {     EpiSoon::bsts_model(model = function(ss, y) {       bsts::AddAutoAr(ss, y = y, lags = 10)     }, ...)   },   horizon = 21, samples = 10 )  rt_forecast #> # A tibble: 210 × 4 #>    sample date          rt horizon #>     <int> <date>     <dbl>   <int> #>  1      1 2020-03-11  2.01       1 #>  2      2 2020-03-11  1.95       1 #>  3      3 2020-03-11  1.96       1 #>  4      4 2020-03-11  1.80       1 #>  5      5 2020-03-11  1.99       1 #>  6      6 2020-03-11  1.99       1 #>  7      7 2020-03-11  1.92       1 #>  8      8 2020-03-11  1.97       1 #>  9      9 2020-03-11  1.91       1 #> 10     10 2020-03-11  1.97       1 #> # … with 200 more rows rt_scores <- score_forecast(rt_forecast, EpiSoon::example_obs_rts)  rt_scores #>           date horizon        mad bias       dss       crps  log_score #>  1: 2020-03-11       1 0.03791498 -1.0 -4.326986 0.03861435 -1.5184775 #>  2: 2020-03-12       2 0.15280090 -0.2 -3.881771 0.04144598 -0.8897410 #>  3: 2020-03-13       3 0.20651175 -0.2 -3.197345 0.05595490 -0.4968929 #>  4: 2020-03-14       4 0.18746350 -0.2 -3.332972 0.05637214 -0.5122104 #>  5: 2020-03-15       5 0.16406278  0.0 -3.201088 0.04822300 -0.6230610 #>  6: 2020-03-16       6 0.20399659  0.0 -2.754084 0.06047096 -0.4903792 #>  7: 2020-03-17       7 0.21796466  0.4 -2.368034 0.07344500 -0.4137683 #>  8: 2020-03-18       8 0.22688799  0.4 -2.161886 0.08571207 -0.3807506 #>  9: 2020-03-19       9 0.16287130  0.6 -2.128870 0.08833016 -0.4954451 #> 10: 2020-03-20      10 0.22271247  0.4 -2.152345 0.07921887 -0.3654417 #> 11: 2020-03-21      11 0.16419787 -0.2 -2.301823 0.05464272 -0.7528236 #> 12: 2020-03-22      12 0.16328383  0.2 -1.756012 0.08020579 -0.6140552 #>      ae_median      se_mean #>  1: 0.05038712 0.0045615570 #>  2: 0.05059928 0.0028231701 #>  3: 0.06070506 0.0012413411 #>  4: 0.05890297 0.0015133406 #>  5: 0.03065231 0.0001928193 #>  6: 0.04373723 0.0044006281 #>  7: 0.06104262 0.0141281692 #>  8: 0.08147208 0.0249957756 #>  9: 0.08904968 0.0253420029 #> 10: 0.08850119 0.0202518177 #> 11: 0.01136493 0.0058927043 #> 12: 0.10101561 0.0294087729 summarise_scores(rt_scores) #> # A tibble: 7 × 8 #>   score        bottom    lower   median    mean   upper     top     sd #>   <chr>         <dbl>    <dbl>    <dbl>   <dbl>   <dbl>   <dbl>  <dbl> #> 1 ae_median  0.0167    0.0487   0.0598   0.0606  0.0832  0.0977 0.0261 #> 2 bias      -0.78     -0.2      0        0.0167  0.4     0.545  0.430  #> 3 crps       0.0394    0.0530   0.0584   0.0636  0.0795  0.0876 0.0172 #> 4 dss       -4.20     -3.23    -2.56    -2.80   -2.16   -1.86   0.792  #> 5 log_score -1.35     -0.656   -0.505   -0.629  -0.471  -0.370  0.319  #> 6 mad        0.0695    0.163    0.176    0.176   0.209   0.226  0.0510 #> 7 se_mean    0.000481  0.00250  0.00523  0.0112  0.0214  0.0283 0.0109 summarised_rt_forecast <- summarise_forecast(rt_forecast)  summarised_rt_forecast #> # A tibble: 21 × 9 #>    date       horizon median  mean     sd bottom lower upper   top #>    <date>       <int>  <dbl> <dbl>  <dbl>  <dbl> <dbl> <dbl> <dbl> #>  1 2020-03-11       1   1.96  1.95 0.0602   1.80  1.95  1.99  2.01 #>  2 2020-03-12       2   1.95  1.95 0.140    1.65  1.91  2.09  2.10 #>  3 2020-03-13       3   1.91  1.93 0.210    1.53  1.84  2.09  2.21 #>  4 2020-03-14       4   1.89  1.91 0.195    1.53  1.78  2.03  2.19 #>  5 2020-03-15       5   1.88  1.89 0.212    1.45  1.77  1.99  2.20 #>  6 2020-03-16       6   1.86  1.88 0.256    1.45  1.68  1.92  2.28 #>  7 2020-03-17       7   1.78  1.84 0.295    1.37  1.63  1.91  2.32 #>  8 2020-03-18       8   1.75  1.82 0.309    1.38  1.58  1.86  2.40 #>  9 2020-03-19       9   1.73  1.80 0.316    1.30  1.67  1.84  2.32 #> 10 2020-03-20      10   1.72  1.78 0.322    1.26  1.52  1.81  2.30 #> # … with 11 more rows plot_forecast(summarised_rt_forecast, EpiSoon::example_obs_rts)"},{"path":"epiforecasts.io/EpiSoon/articles/introduction.html","id":"forecast-cases-score-and-plot","dir":"Articles","previous_headings":"","what":"Forecast cases, score and plot","title":"Getting started","text":"Forecasting cases requires observed cases observed Rt estimates based also requires assumption made serial interval (defined using probability distribution). Forecast cases (using case data observed Rt estimates based) Score cases forecast Summarise cases scores Summarise cases forecast Plot forecast observed case data","code":"EpiSoon::example_obs_cases #> # A tibble: 63 × 2 #>    cases date       #>    <dbl> <date>     #>  1     1 2020-01-20 #>  2     0 2020-01-21 #>  3     1 2020-01-22 #>  4     0 2020-01-23 #>  5     0 2020-01-24 #>  6     0 2020-01-25 #>  7     1 2020-01-26 #>  8     0 2020-01-27 #>  9     0 2020-01-28 #> 10     0 2020-01-29 #> # … with 53 more rows EpiSoon::example_serial_interval #>         1    2    3    4    5    6    7    8    9   10   11   12   14  #> 0.00 0.03 0.25 0.17 0.09 0.15 0.13 0.05 0.05 0.03 0.02 0.01 0.01 0.01 case_forecast <- forecast_cases(EpiSoon::example_obs_cases, rt_forecast,   serial_interval = EpiSoon::example_serial_interval )  case_forecast #>      sample       date cases horizon #>   1:      1 2020-03-11   162       1 #>   2:      1 2020-03-12   201       2 #>   3:      1 2020-03-13   260       3 #>   4:      1 2020-03-14   289       4 #>   5:      1 2020-03-15   321       5 #>  ---                                 #> 206:     10 2020-03-27  1538      17 #> 207:     10 2020-03-28  1691      18 #> 208:     10 2020-03-29  1982      19 #> 209:     10 2020-03-30  2164      20 #> 210:     10 2020-03-31  2338      21 case_scores <- score_case_forecast(case_forecast, EpiSoon::example_obs_cases)  case_scores #>           date horizon      mad bias       dss   crps ae_median   se_mean #>  1: 2020-03-11       1  14.8260 -0.4  4.973376   3.69       5.0     28.09 #>  2: 2020-03-12       2  17.7912  0.2  6.169429   7.02       8.0     10.24 #>  3: 2020-03-13       3  21.4977  0.8  7.903495  24.09      41.0    992.25 #>  4: 2020-03-14       4  38.5476  0.4  7.455502  12.50      14.5    169.00 #>  5: 2020-03-15       5  63.7518  0.4  8.586617  24.54      37.5   1616.04 #>  6: 2020-03-16       6  77.8365  0.8 10.461852  68.93     114.5  10836.81 #>  7: 2020-03-17       7  71.9061  0.8 10.697762  83.14     115.5  15129.00 #>  8: 2020-03-18       8  93.4038  0.8 11.141464  96.02     133.0  25217.44 #>  9: 2020-03-19       9 114.1602  0.8 11.318916 101.25     149.0  29721.76 #> 10: 2020-03-20      10 181.6185  0.8 11.898360 122.12     184.5  52166.56 #> 11: 2020-03-21      11 207.5640  0.2 11.821367  76.30      78.0  24995.61 #> 12: 2020-03-22      12 235.7334  0.8 13.680491 326.01     429.5 306030.24 summarise_scores(case_scores) #> # A tibble: 6 × 8 #>   score     bottom  lower  median      mean   upper      top        sd #>   <chr>      <dbl>  <dbl>   <dbl>     <dbl>   <dbl>    <dbl>     <dbl> #> 1 ae_median  5.82   31.8     96.2   109.      137      362.    117.    #> 2 bias      -0.235   0.35     0.8     0.533     0.8      0.8     0.385 #> 3 crps       4.61   21.2     72.6    78.8      97.3    270.     87.9   #> 4 dss        5.30    7.79    10.6     9.68     11.4     13.2     2.62  #> 5 mad       15.6    34.3     74.9    94.9     131.     228.     75.8   #> 6 se_mean   15.1   786.   12983.  38909.    26344.  236218.  85654. summarised_case_forecast <- summarise_case_forecast(case_forecast)  summarised_case_forecast #> # A tibble: 21 × 9 #>    date       horizon median  mean    sd bottom lower upper   top #>    <date>       <int>  <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> #>  1 2020-03-11       1   162   162.  11.2    142   162   176   176 #>  2 2020-03-12       2   202   191.  22.8    148   201   216   216 #>  3 2020-03-13       3   249   240.  31.9    166   247   275   275 #>  4 2020-03-14       4   266.  264   41.5    170   251   294   310 #>  5 2020-03-15       5   310.  313.  60.3    202   266   327   394 #>  6 2020-03-16       6   380.  370.  84.1    219   351   434   503 #>  7 2020-03-17       7   412.  419  108.     212   372   464   590 #>  8 2020-03-18       8   476   502. 159.     249   413   539   783 #>  9 2020-03-19       9   548.  572. 201.     238   456   610   930 #> 10 2020-03-20      10   638.  682. 277.     273   495   725  1160 #> # … with 11 more rows plot_forecast(summarised_case_forecast, EpiSoon::example_obs_cases)"},{"path":"epiforecasts.io/EpiSoon/articles/introduction.html","id":"use-iterative-fitting-to-explore-a-forecast","dir":"Articles","previous_headings":"","what":"Use iterative fitting to explore a forecast","title":"Getting started","text":"explore quality models forecast can help iteratively forecast available data point. supported EpiSoon using following: can iteratively forecast cases using following: functionality shown also supported iterative forecasting.","code":"it_rt_forecast <- iterative_rt_forecast(EpiSoon::example_obs_rts,   model = function(...) {     EpiSoon::bsts_model(model = function(ss, y) {       bsts::AddAutoAr(ss, y = y, lags = 10)     }, ...)   },   horizon = 7, samples = 10, min_points = 4 )  it_rt_forecast #> # A tibble: 1,260 × 5 #>    forecast_date sample date          rt horizon #>    <chr>          <int> <date>     <dbl>   <int> #>  1 2020-03-05         1 2020-03-06  2.29       1 #>  2 2020-03-05         2 2020-03-06  2.16       1 #>  3 2020-03-05         3 2020-03-06  2.25       1 #>  4 2020-03-05         4 2020-03-06  2.19       1 #>  5 2020-03-05         5 2020-03-06  2.27       1 #>  6 2020-03-05         6 2020-03-06  2.23       1 #>  7 2020-03-05         7 2020-03-06  2.19       1 #>  8 2020-03-05         8 2020-03-06  2.26       1 #>  9 2020-03-05         9 2020-03-06  2.32       1 #> 10 2020-03-05        10 2020-03-06  2.07       1 #> # … with 1,250 more rows it_cases_forecast <- iterative_case_forecast(   it_fit_samples = it_rt_forecast,   cases = EpiSoon::example_obs_cases,   serial_interval = EpiSoon::example_serial_interval )  it_cases_forecast #>       forecast_date sample       date cases horizon #>    1:    2020-03-05      1 2020-03-06    87       1 #>    2:    2020-03-05      1 2020-03-07   105       2 #>    3:    2020-03-05      1 2020-03-08   129       3 #>    4:    2020-03-05      1 2020-03-09   163       4 #>    5:    2020-03-05      1 2020-03-10   199       5 #>   ---                                               #> 1256:    2020-03-22     10 2020-03-25   625       3 #> 1257:    2020-03-22     10 2020-03-26   687       4 #> 1258:    2020-03-22     10 2020-03-27   699       5 #> 1259:    2020-03-22     10 2020-03-28   794       6 #> 1260:    2020-03-22     10 2020-03-29   854       7"},{"path":"epiforecasts.io/EpiSoon/articles/introduction.html","id":"evaluate-a-model","dir":"Articles","previous_headings":"","what":"Evaluate a model","title":"Getting started","text":"real world use likely want evaluate model iteratively forecasting Rts cases, summarising forecasts, scoring returning sensible format. steps contained evaluate_model function. functionality outlined can applied output special plotting function (plot_forecast_evaluation) also provided. First evaluate Rt forecast observed values.  evaluate forecast cases observed values.","code":"model_eval <- evaluate_model(EpiSoon::example_obs_rts,   EpiSoon::example_obs_cases,   model = function(...) {     EpiSoon::bsts_model(model = function(ss, y) {       bsts::AddAutoAr(ss, y = y, lags = 10)     }, ...)   },   horizon = 21, samples = 10,   serial_interval = EpiSoon::example_serial_interval )  model_eval #> $forecast_rts #> # A tibble: 399 × 10 #>    forecast_date date       horizon median  mean     sd bottom lower upper   top #>    <chr>         <date>       <int>  <dbl> <dbl>  <dbl>  <dbl> <dbl> <dbl> <dbl> #>  1 2020-03-04    2020-03-05       1   2.24  2.26 0.0756   2.17  2.17  2.24  2.40 #>  2 2020-03-04    2020-03-06       2   2.23  2.26 0.159    2.10  2.13  2.26  2.63 #>  3 2020-03-04    2020-03-07       3   2.22  2.24 0.238    1.97  2.05  2.29  2.80 #>  4 2020-03-04    2020-03-08       4   2.17  2.22 0.275    1.95  1.95  2.17  2.86 #>  5 2020-03-04    2020-03-09       5   2.14  2.22 0.320    1.89  1.89  2.17  2.94 #>  6 2020-03-04    2020-03-10       6   2.09  2.21 0.394    1.81  1.81  2.15  3.10 #>  7 2020-03-04    2020-03-11       7   2.06  2.17 0.428    1.68  1.68  2.12  3.13 #>  8 2020-03-04    2020-03-12       8   2.03  2.16 0.472    1.63  1.63  2.10  3.20 #>  9 2020-03-04    2020-03-13       9   1.97  2.16 0.525    1.68  1.68  2.03  3.40 #> 10 2020-03-04    2020-03-14      10   1.93  2.14 0.592    1.55  1.55  1.98  3.50 #> # … with 389 more rows #>  #> $rt_scores #>      forecast_date       date horizon        mad bias       dss       crps #>   1:    2020-03-04 2020-03-05       1 0.07594723 -0.2 -5.265905 0.02032686 #>   2:    2020-03-04 2020-03-06       2 0.13592447  0.2 -3.581210 0.03706158 #>   3:    2020-03-04 2020-03-07       3 0.20019674  0.2 -2.788346 0.06010695 #>   4:    2020-03-04 2020-03-08       4 0.25702439  0.2 -2.490156 0.06790351 #>   5:    2020-03-04 2020-03-09       5 0.30669457  0.2 -2.117240 0.08226306 #>  ---                                                                       #> 167:    2020-03-19 2020-03-21       2 0.09449174 -0.6 -3.891119 0.05142247 #> 168:    2020-03-19 2020-03-22       3 0.08941909  0.2 -4.670972 0.02624840 #> 169:    2020-03-20 2020-03-21       1 0.04374100 -1.0  1.561088 0.09281150 #> 170:    2020-03-20 2020-03-22       2 0.09969289 -0.2 -4.464452 0.03130195 #> 171:    2020-03-21 2020-03-22       1 0.05701354  0.0 -5.666749 0.01802559 #>       log_score  ae_median      se_mean #>   1: -1.4573254 0.02459894 2.580595e-05 #>   2: -0.9795174 0.03653390 4.503400e-03 #>   3: -0.5434189 0.07815709 9.470642e-03 #>   4: -0.4227866 0.06787491 1.323174e-02 #>   5: -0.2087292 0.08087150 2.469456e-02 #>  ---                                    #> 167: -1.0802065 0.09340104 7.501351e-03 #> 168: -1.2607266 0.03034835 3.253811e-04 #> 169:  0.4908966 0.11397683 1.339973e-02 #> 170: -1.1139585 0.02736350 2.701013e-04 #> 171: -1.6845000 0.02106243 5.494320e-04 #>  #> $forecast_cases #> # A tibble: 171 × 10 #>    forecast_date date       horizon median  mean     sd bottom lower upper   top #>    <chr>         <date>       <int>  <dbl> <dbl>  <dbl>  <dbl> <dbl> <dbl> <dbl> #>  1 2020-03-04    2020-03-05       1   70.5  70.7   7.39     60    65    77    80 #>  2 2020-03-04    2020-03-06       2   81.5  83.7   9.33     69    78    82    98 #>  3 2020-03-04    2020-03-07       3  102   103.   13.5      86    95   108   134 #>  4 2020-03-04    2020-03-08       4  131   131.   20.5     101   106   133   158 #>  5 2020-03-04    2020-03-09       5  146.  149.   26.2     118   138   157   212 #>  6 2020-03-04    2020-03-10       6  177   194.   57.9     149   149   181   336 #>  7 2020-03-04    2020-03-11       7  220   242.   76.5     167   167   220   407 #>  8 2020-03-04    2020-03-12       8  272   296.  116.      152   217   295   545 #>  9 2020-03-04    2020-03-13       9  284.  354.  201.      188   188   306   856 #> 10 2020-03-04    2020-03-14      10  338.  459.  287.      219   219   361  1173 #> # … with 161 more rows #>  #> $case_scores #>      sample forecast_date       date horizon     mad bias       dss   crps #>   1:      1    2020-03-04 2020-03-05       1  8.8956  0.6  5.100933   4.33 #>   2:      1    2020-03-04 2020-03-06       2  5.1891  0.8  5.822097   6.71 #>   3:      1    2020-03-04 2020-03-07       3  9.6369  0.8  6.528794   9.01 #>   4:      1    2020-03-04 2020-03-08       4 28.9107  0.8  8.172874  18.37 #>   5:      1    2020-03-04 2020-03-09       5 14.0847  1.0  8.221053  20.61 #>  ---                                                                       #> 167:      1    2020-03-19 2020-03-21       2 47.4432 -1.0 17.259994  95.76 #> 168:      1    2020-03-19 2020-03-22       3 50.4084  1.0 20.155429 162.75 #> 169:      1    2020-03-20 2020-03-21       1 30.3933 -1.0 38.640129 115.27 #> 170:      1    2020-03-20 2020-03-22       2 45.2193  1.0 21.420650 146.80 #> 171:      1    2020-03-21 2020-03-22       1 39.2889  1.0 49.329891 168.25 #>      ae_median  se_mean #>   1:       7.5    59.29 #>   2:       8.5   114.49 #>   3:      14.0   234.09 #>   4:      29.0   846.81 #>   5:      29.5  1108.89 #>  ---                    #> 167:     108.0 13618.89 #> 168:     199.5 37403.56 #> 169:     133.5 16384.00 #> 170:     168.0 30032.89 #> 171:     186.5 34003.36 plot_forecast_evaluation(model_eval$forecast_rts,   EpiSoon::example_obs_rts,   horizon_to_plot = 7 ) plot_forecast_evaluation(model_eval$forecast_cases,   EpiSoon::example_obs_cases,   horizon_to_plot = 7 )"},{"path":"epiforecasts.io/EpiSoon/articles/introduction.html","id":"wrapper-functions","dir":"Articles","previous_headings":"","what":"Wrapper functions","title":"Getting started","text":"EpiSoon provides several wrapper functions (compare_models compare_timeseries). wrap evaluate_model can used rapidly explore several forecasting models (compare_models) multiple time series (compare_timeseries). lower level summary plotting functions can used output wrappers explore results. See function documentation details.","code":""},{"path":"epiforecasts.io/EpiSoon/articles/introduction.html","id":"supporting-generic-modelling-packages","dir":"Articles","previous_headings":"","what":"Supporting generic modelling packages","title":"Getting started","text":"EpiSoon supports use generic forecasting models used wrapper accepts standardised set inputs outputs forecast form package expects. Examples model wrappers bsts fable packages (bsts_model fable_model). See examples documentation fable_model details.","code":""},{"path":"epiforecasts.io/EpiSoon/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sam Abbott. Author, maintainer. Nikos Bosse. Author. Joel Hellewell. Author. Katharine Sherratt. Author. James Munday. Author. Robin Thompson. Author. Aurelien Chateigner. Author. Sylvain Mareschal. Author. Andrea Rau. Author. Nathalie Vialaneix. Author. Michael DeWitt. Author. Sebastian Funk. Author.","code":""},{"path":"epiforecasts.io/EpiSoon/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sam Abbott, Bosse N, Hellewell J, Sherratt K, Munday J, Thompson R, Chateigner , Mareschal S, Rau , Vialaneix N, DeWitt M, Funk S (2023). EpiSoon: Forecast Cases Using Reproduction Numbers. R package version 0.3.1.","code":"@Manual{,   title = {EpiSoon: Forecast Cases Using Reproduction Numbers},   author = {{Sam Abbott} and Nikos Bosse and Joel Hellewell and Katharine Sherratt and James Munday and Robin Thompson and Aurelien Chateigner and Sylvain Mareschal and Andrea Rau and Nathalie Vialaneix and Michael DeWitt and Sebastian Funk},   year = {2023},   note = {R package version 0.3.1}, }"},{"path":"epiforecasts.io/EpiSoon/index.html","id":"episoon","dir":"","previous_headings":"","what":"Forecast Cases Using Reproduction Numbers","title":"Forecast Cases Using Reproduction Numbers","text":"package provides tooling forecast time-varying reproduction number use forecast reported case counts via branching process. supports range time series modelling packages including bsts, forecast, fable. also supports ensembles via stackr forecastHyrbid. Forecasts can assessed iteractively fitting using proper scoring rules (via scoringutils scoringRules) compare observed case counts estimated reproduction numbers.","code":""},{"path":"epiforecasts.io/EpiSoon/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Forecast Cases Using Reproduction Numbers","text":"Install stable development version package : Install unstable development version package (users need ):","code":"install.packages(\"EpiSoon\", repos = \"https://epiforecasts.r-universe.dev\") remotes::install_github(\"epiforecasts/EpiSoon\")"},{"path":"epiforecasts.io/EpiSoon/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Forecast Cases Using Reproduction Numbers","text":"Load packages (bsts fable models, ggplot2 plotting, cowplot theming) Set example data (using EpiSoon::example_obs_rts EpiSoon::example_obs_cases starting data sets). generating timeseries EpiNow use get_timeseries extract required data. Define list models compared. Compare models across timeseries (change future::plan parallel). Plot evaluation Rt forecasts using iterative fitting.  Plot evaluation case forecasts using iterative fitting  Summarise forecasts model scored observed cases","code":"library(EpiSoon) library(bsts) library(fable) library(future) library(cowplot) library(dplyr) obs_rts <- EpiSoon::example_obs_rts %>%   dplyr::mutate(timeseries = \"Region 1\") %>%   dplyr::bind_rows(EpiSoon::example_obs_rts %>%     dplyr::mutate(timeseries = \"Region 2\"))  obs_cases <- EpiSoon::example_obs_cases %>%   dplyr::mutate(timeseries = \"Region 1\") %>%   dplyr::bind_rows(EpiSoon::example_obs_cases %>%     dplyr::mutate(timeseries = \"Region 2\")) models <- list(   \"AR 3\" =     function(...) {       EpiSoon::bsts_model(         model =           function(ss, y) {             bsts::AddAr(ss, y = y, lags = 3)           }, ...       )     },   \"Semi-local linear trend\" =     function(...) {       EpiSoon::bsts_model(         model =           function(ss, y) {             bsts::AddSemilocalLinearTrend(ss, y = y)           }, ...       )     },   \"ARIMA\" =     function(...) {       EpiSoon::fable_model(model = fable::ARIMA(y ~ time), ...)     } ) future::plan(\"sequential\")  ## Compare models forecasts <- EpiSoon::compare_timeseries(obs_rts, obs_cases, models,   horizon = 7, samples = 10,   serial_interval = EpiSoon::example_serial_interval ) #> Warning: There were 40 warnings in `dplyr::mutate()`. #> The first warning was: #> ℹ In argument: `eval = furrr::future_pmap(...)`. #> Caused by warning: #> ! Unknown or uninitialised column: `.distribution`. #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 39 remaining warnings.  forecasts #> $forecast_rts #> # A tibble: 511 × 12 #>    timeseries model foreca…¹ date       horizon median  mean     sd bottom lower #>    <chr>      <chr> <chr>    <date>       <int>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #>  1 Region 1   AR 3  2020-03… 2020-03-05       1   2.26  2.25 0.0504   2.17  2.25 #>  2 Region 1   AR 3  2020-03… 2020-03-06       2   2.21  2.19 0.0729   2.09  2.19 #>  3 Region 1   AR 3  2020-03… 2020-03-07       3   2.15  2.12 0.0957   1.95  2.13 #>  4 Region 1   AR 3  2020-03… 2020-03-08       4   2.07  2.05 0.128    1.86  2.06 #>  5 Region 1   AR 3  2020-03… 2020-03-09       5   2.00  1.98 0.165    1.69  2.00 #>  6 Region 1   AR 3  2020-03… 2020-03-10       6   1.95  1.93 0.173    1.61  1.93 #>  7 Region 1   AR 3  2020-03… 2020-03-11       7   1.90  1.86 0.199    1.52  1.86 #>  8 Region 1   AR 3  2020-03… 2020-03-07       1   2.11  2.11 0.0389   2.02  2.10 #>  9 Region 1   AR 3  2020-03… 2020-03-08       2   2.04  2.03 0.0449   1.94  2.02 #> 10 Region 1   AR 3  2020-03… 2020-03-09       3   1.97  1.94 0.0713   1.80  1.96 #> # … with 501 more rows, 2 more variables: upper <dbl>, top <dbl>, and #> #   abbreviated variable name ¹​forecast_date #>  #> $rt_scores #> # A tibble: 399 × 12 #>    timeseries model forec…¹ date       horizon    mad  bias   dss   crps log_s…² #>    <chr>      <chr> <chr>   <date>       <int>  <dbl> <dbl> <dbl>  <dbl>   <dbl> #>  1 Region 1   AR 3  2020-0… 2020-03-05       1 0.0514  -0.2 -5.98 0.0110  -1.96  #>  2 Region 1   AR 3  2020-0… 2020-03-06       2 0.0630   0.4 -5.34 0.0176  -1.55  #>  3 Region 1   AR 3  2020-0… 2020-03-07       3 0.0879   0   -4.72 0.0232  -1.31  #>  4 Region 1   AR 3  2020-0… 2020-03-08       4 0.129   -0.2 -4.01 0.0345  -0.961 #>  5 Region 1   AR 3  2020-0… 2020-03-09       5 0.165   -0.4 -3.44 0.0514  -0.764 #>  6 Region 1   AR 3  2020-0… 2020-03-10       6 0.170   -0.4 -3.25 0.0578  -0.713 #>  7 Region 1   AR 3  2020-0… 2020-03-11       7 0.186   -0.6 -2.67 0.0902  -0.483 #>  8 Region 1   AR 3  2020-0… 2020-03-07       1 0.0283  -0.8 -5.53 0.0207  -2.05  #>  9 Region 1   AR 3  2020-0… 2020-03-08       2 0.0273  -1   -3.32 0.0506  -0.712 #> 10 Region 1   AR 3  2020-0… 2020-03-09       3 0.0398  -1   -2.13 0.0864  -0.162 #> # … with 389 more rows, 2 more variables: ae_median <dbl>, se_mean <dbl>, and #> #   abbreviated variable names ¹​forecast_date, ²​log_score #>  #> $forecast_cases #> # A tibble: 399 × 12 #>    timeseries model forecas…¹ date       horizon median  mean    sd bottom lower #>    <chr>      <chr> <chr>     <date>       <int>  <dbl> <dbl> <dbl>  <dbl> <dbl> #>  1 Region 1   AR 3  2020-03-… 2020-03-05       1   68.5  67.5  5.91     59    61 #>  2 Region 1   AR 3  2020-03-… 2020-03-06       2   81.5  80.5 11.8      61    72 #>  3 Region 1   AR 3  2020-03-… 2020-03-07       3   97    94.4 15.7      68    94 #>  4 Region 1   AR 3  2020-03-… 2020-03-08       4  114   116.  13.9     102   102 #>  5 Region 1   AR 3  2020-03-… 2020-03-09       5  139   131.  24.0      98   132 #>  6 Region 1   AR 3  2020-03-… 2020-03-10       6  150.  156.  23.9     117   141 #>  7 Region 1   AR 3  2020-03-… 2020-03-11       7  186.  182.  41.1     122   155 #>  8 Region 1   AR 3  2020-03-… 2020-03-07       1   94.5  92.7  8.30     80    94 #>  9 Region 1   AR 3  2020-03-… 2020-03-08       2  108   107.   6.34     95   104 #> 10 Region 1   AR 3  2020-03-… 2020-03-09       3  122.  121.  13.8      94   115 #> # … with 389 more rows, 2 more variables: upper <dbl>, top <dbl>, and #> #   abbreviated variable name ¹​forecast_date #>  #> $case_scores #> # A tibble: 399 × 12 #>    timeseries model sample forecast…¹ date       horizon   mad  bias   dss  crps #>    <chr>      <chr> <chr>  <chr>      <date>       <int> <dbl> <dbl> <dbl> <dbl> #>  1 Region 1   AR 3  1      2020-03-04 2020-03-05       1  6.67   0.4  4.09  2.75 #>  2 Region 1   AR 3  1      2020-03-04 2020-03-06       2 11.1    0.4  5.28  4.77 #>  3 Region 1   AR 3  1      2020-03-04 2020-03-07       3 13.3    0.4  5.58  6.3  #>  4 Region 1   AR 3  1      2020-03-04 2020-03-08       4 14.1    0.6  6.30  6.85 #>  5 Region 1   AR 3  1      2020-03-04 2020-03-09       5 29.7    0.2  6.70 11.1  #>  6 Region 1   AR 3  1      2020-03-04 2020-03-10       6 14.1    0.6  6.68  7.7  #>  7 Region 1   AR 3  1      2020-03-04 2020-03-11       7 42.3    0.2  7.47 13.1  #>  8 Region 1   AR 3  1      2020-03-06 2020-03-07       1  8.90   0.4  4.48  3.65 #>  9 Region 1   AR 3  1      2020-03-06 2020-03-08       2  5.19   0.6  4.23  3.68 #> 10 Region 1   AR 3  1      2020-03-06 2020-03-09       3 13.3    0.2  5.26  4.1  #> # … with 389 more rows, 2 more variables: ae_median <dbl>, se_mean <dbl>, and #> #   abbreviated variable name ¹​forecast_date EpiSoon::plot_forecast_evaluation(forecasts$forecast_rts, obs_rts, c(7)) +   ggplot2::facet_grid(model ~ timeseries) +   cowplot::panel_border() EpiSoon::plot_forecast_evaluation(forecasts$forecast_cases, obs_cases, c(7)) +   ggplot2::facet_grid(model ~ timeseries, scales = \"free\") +   cowplot::panel_border() EpiSoon::summarise_scores(forecasts$case_scores) #> # A tibble: 12 × 9 #>    score     model             bottom lower median    mean  upper    top      sd #>    <chr>     <chr>              <dbl> <dbl>  <dbl>   <dbl>  <dbl>  <dbl>   <dbl> #>  1 ae_median AR 3               0.85   9     24.5  5.69e+1   91   2.27e2 6.28e+1 #>  2 ae_median Semi-local linea…  0.613  8.5   24.2  5.11e+1   92.4 1.88e2 5.86e+1 #>  3 bias      AR 3              -1      0      0.6  4.47e-1    1   1   e0 6.13e-1 #>  4 bias      Semi-local linea… -1      0.2    0.6  4.81e-1    1   1   e0 5.90e-1 #>  5 crps      AR 3               2.94   6.57  17.8  4.69e+1   79.3 2.00e2 5.59e+1 #>  6 crps      Semi-local linea…  2.80   6.82  15.6  4.18e+1   69.5 1.60e2 5.12e+1 #>  7 dss       AR 3               4.53   6.09   8.33 1.29e+1   15.9 4.67e1 1.09e+1 #>  8 dss       Semi-local linea…  4.56   6.20   7.74 1.28e+1   12.7 5.07e1 1.35e+1 #>  9 mad       AR 3               7.93  13.3   21.5  2.61e+1   34.1 8.51e1 1.76e+1 #> 10 mad       Semi-local linea…  6.10  12.8   19.3  2.46e+1   31.1 6.58e1 1.70e+1 #> 11 se_mean   AR 3               1.15  81    784    7.29e+3 8855.  4.72e4 1.56e+4 #> 12 se_mean   Semi-local linea…  0.524 79.2  595.   6.26e+3 8663.  4.16e4 1.31e+4"},{"path":"epiforecasts.io/EpiSoon/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Forecast Cases Using Reproduction Numbers","text":"File issue identified issue package. Please note due operational constraints priority given users informing government policy offering methodological insights. welcome contributions, particular improve approach robustness code base.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/brms_model.html","id":null,"dir":"Reference","previous_headings":"","what":"brms Model Wrapper — brms_model","title":"brms Model Wrapper — brms_model","text":"Allows users specify model using brms::bf()  wrapper brms Note brms tidybayes must installed model wrapper functional.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/brms_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"brms Model Wrapper — brms_model","text":"","code":"brms_model(   y = NULL,   samples = NULL,   horizon = NULL,   model = NULL,   n_cores = 1,   n_chains = 4,   n_iter = 2000,   ... )"},{"path":"epiforecasts.io/EpiSoon/reference/brms_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"brms Model Wrapper — brms_model","text":"y Numeric vector time points forecast samples Numeric, number samples take. horizon Numeric, time horizon predict. model brms model wrapped brms::bf() function n_cores Numeric, number cores use, default 1 n_chains Numeric, number chains use, default 4 n_iter Numeric, number iterations sampler use, default 4000 ... additional arguments passed brms (e.g. priors family)","code":""},{"path":"epiforecasts.io/EpiSoon/reference/brms_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"brms Model Wrapper — brms_model","text":"dataframe predictions (columns representing time horizon rows representing samples).","code":""},{"path":"epiforecasts.io/EpiSoon/reference/brms_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"brms Model Wrapper — brms_model","text":"","code":"if (FALSE) {  ## Used on its own ## Note: More iterations and chains should be used library(brms) brms_model(   y = EpiSoon::example_obs_rts[1:10, ]$rt,   model = brms::bf(y ~ gp(time)),   samples = 10, horizon = 7, n_iter = 40, n_chains = 1, refresh = 0 )  ## Used for forecasting ## Note that the timeout parameter has been increased to allow ## for the time for the code to be compiled ## Note: More iterations and chains should be used  forecast_rt(EpiSoon::example_obs_rts[1:10, ],   model = function(...) {     brms_model(model = brms::bf(y ~ gp(time)), n_iter = 40, n_chains = 1, ...)   },   horizon = 7, samples = 10, timeout = 300 ) }"},{"path":"epiforecasts.io/EpiSoon/reference/bsts_model.html","id":null,"dir":"Reference","previous_headings":"","what":"bsts Model Wrapper — bsts_model","title":"bsts Model Wrapper — bsts_model","text":"bsts Model Wrapper","code":""},{"path":"epiforecasts.io/EpiSoon/reference/bsts_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bsts Model Wrapper — bsts_model","text":"","code":"bsts_model(y = NULL, samples = NULL, horizon = NULL, model = NULL)"},{"path":"epiforecasts.io/EpiSoon/reference/bsts_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bsts Model Wrapper — bsts_model","text":"y Numeric vector time points forecast samples Numeric, number samples take. horizon Numeric, time horizon predict. model bsts model object wrapped function ss y argument.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/bsts_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bsts Model Wrapper — bsts_model","text":"dataframe predictions (columns representing time horizon rows representing samples).","code":""},{"path":"epiforecasts.io/EpiSoon/reference/bsts_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bsts Model Wrapper — bsts_model","text":"","code":"if (FALSE) {  library(bsts)  ## Used on its own bsts_model(   y = EpiSoon::example_obs_rts[1:10, ]$rt,   model = function(ss, y) {     bsts::AddAr(ss, y = y, lags = 2)   },   samples = 10, horizon = 7 )  ## Used for forecasting forecast_rt(EpiSoon::example_obs_rts[1:10, ],   model = function(...) {     EpiSoon::bsts_model(       model =         function(ss, y) {           bsts::AddAr(ss, y = y, lags = 3)         }, ...     )   },   horizon = 7, samples = 10 ) }"},{"path":"epiforecasts.io/EpiSoon/reference/compare_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare forecasting models — compare_models","title":"Compare forecasting models — compare_models","text":"Compare forecasting models","code":""},{"path":"epiforecasts.io/EpiSoon/reference/compare_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare forecasting models — compare_models","text":"","code":"compare_models(   obs_rts = NULL,   obs_cases = NULL,   models = NULL,   horizon = 7,   samples = 1000,   bound_rt = TRUE,   timeout = 30,   serial_interval = NULL,   min_points = 3,   rdist = NULL,   return_raw = FALSE )"},{"path":"epiforecasts.io/EpiSoon/reference/compare_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare forecasting models — compare_models","text":"obs_rts Dataframe Rt observations forecast score . contain date rt column. multiple samples included denoted using numeric sample variable. obs_cases Dataframe case observations use case prediction scoring. contain date cases column. multiple samples included denoted using numeric sample variable. models list models. configuration given examples. model needs wrapped function takes ... argument returns dataframe samples column representing time horizon. Example: function(...) {EpiSoon::bsts_model(model = function(ss, y){bsts::AddAr(ss, y = y, lags = 3)}, ...)}. horizon Numeric, time horizon predict. samples Numeric, number samples take. bound_rt Logical, defaults TRUE. Rt values bounded greater equal 0. timeout Numeric, timeout model fitting seconds. Defaults 30 seconds. serial_interval numeric vector describing probability distribution serial interval. See EpiNow::covid_serial_interval example format. min_points Numeric, defaults 3. minimum number time points begin iteratively evaluating forecast. rdist function used sample number cases. Must take two arguments first specfying number samples second mean. Defaults rpois supplied return_raw Logical, raw cases rt forecasts returned. Defaults FALSE.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/compare_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare forecasting models — compare_models","text":"list dataframes produced evaluate model additional model column.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/compare_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare forecasting models — compare_models","text":"","code":"if (FALSE) { ## List of forecasting bsts models wrapped in functions. models <- list(   \"AR 3\" =     function(...) {       EpiSoon::bsts_model(         model =           function(ss, y) {             bsts::AddAr(ss, y = y, lags = 3)           }, ...       )     },   \"Semi-local linear trend\" =     function(...) {       EpiSoon::bsts_model(         model =           function(ss, y) {             bsts::AddSemilocalLinearTrend(ss, y = y)           }, ...       )     },   \"ARIMA\" =     function(...) {       fable_model(model = fable::ARIMA(y ~ time), ...)     } )    ## Compare models evaluations <- compare_models(EpiSoon::example_obs_rts,   EpiSoon::example_obs_cases, models,   horizon = 7, samples = 10,   serial_interval = example_serial_interval )  ## Example evaluation plot for comparing forecasts ## with actuals for a range of models and time horizons. plot_forecast_evaluation(evaluations$forecast_rts, EpiSoon::example_obs_rts, c(1, 3, 7)) +   ggplot2::facet_grid(model ~ horizon) +   cowplot::panel_border()  ## Hack to plot observed cases vs predicted plot_forecast_evaluation(   evaluations$forecast_cases,   EpiSoon::example_obs_cases, c(1, 3, 7) ) +   ggplot2::facet_wrap(model ~ horizon, scales = \"free\") +   cowplot::panel_border() }"},{"path":"epiforecasts.io/EpiSoon/reference/compare_timeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare timeseries and forecast models — compare_timeseries","title":"Compare timeseries and forecast models — compare_timeseries","text":"Compare timeseries forecast models","code":""},{"path":"epiforecasts.io/EpiSoon/reference/compare_timeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare timeseries and forecast models — compare_timeseries","text":"","code":"compare_timeseries(   obs_rts = NULL,   obs_cases = NULL,   models = NULL,   horizon = 7,   samples = 1000,   bound_rt = TRUE,   min_points = 3,   timeout = 30,   serial_interval = NULL,   rdist = NULL,   return_raw = FALSE )"},{"path":"epiforecasts.io/EpiSoon/reference/compare_timeseries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare timeseries and forecast models — compare_timeseries","text":"obs_rts dataframe observed Rts including timeseries variable denote timeseris  rt vector (forecast) date vector (denote time). Optionally dataframe can contain samples timeseries case denoted using sample variable. obs_cases dataframe observed cases including timeseries variable denote timeseris  cases vector (forecast) date vector (denote time). Optionally dataframe can contain samples timeseries case denoted using sample variable. models list models. configuration given examples. model needs wrapped function takes ... argument returns dataframe samples column representing time horizon. Example: function(...) {EpiSoon::bsts_model(model = function(ss, y){bsts::AddAr(ss, y = y, lags = 3)}, ...)}. horizon Numeric, time horizon predict. samples Numeric, number samples take. bound_rt Logical, defaults TRUE. Rt values bounded greater equal 0. min_points Numeric, defaults 3. minimum number time points begin iteratively evaluating forecast. timeout Numeric, timeout model fitting seconds. Defaults 30 seconds. serial_interval numeric vector describing probability distribution serial interval. See EpiNow::covid_serial_interval example format. rdist function used sample number cases. Must take two arguments first specfying number samples second mean. Defaults rpois supplied return_raw Logical, raw cases rt forecasts returned. Defaults FALSE.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/compare_timeseries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare timeseries and forecast models — compare_timeseries","text":"list dataframes produced evaluate model additional model column.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/compare_timeseries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare timeseries and forecast models — compare_timeseries","text":"","code":"if (FALSE) { ## Example data obs_rts <- EpiSoon::example_obs_rts %>%   dplyr::mutate(timeseries = \"Region 1\") %>%   dplyr::bind_rows(EpiSoon::example_obs_rts %>%     dplyr::mutate(timeseries = \"Region 2\"))  obs_cases <- EpiSoon::example_obs_cases %>%   dplyr::mutate(timeseries = \"Region 1\") %>%   dplyr::bind_rows(EpiSoon::example_obs_cases %>%     dplyr::mutate(timeseries = \"Region 2\"))  ## List of forecasting bsts models wrapped in functions. models <- list(   \"AR 3\" =     function(...) {       EpiSoon::bsts_model(         model =           function(ss, y) {             bsts::AddAr(ss, y = y, lags = 3)           }, ...       )     },   \"Semi-local linear trend\" =     function(...) {       EpiSoon::bsts_model(         model =           function(ss, y) {             bsts::AddSemilocalLinearTrend(ss, y = y)           }, ...       )     },   \"ARIMA\" =     function(...) {       fable_model(model = fable::ARIMA(y ~ time), ...)     } )   ## Compare models evaluations <- compare_timeseries(obs_rts, obs_cases, models,   horizon = 7, samples = 10,   serial_interval = EpiSoon::example_serial_interval )  evaluations  ## Example evaluation plot for comparing forecasts ## with actuals for a range of models and timeseries. plot_forecast_evaluation(evaluations$forecast_rts, obs_rts, c(7)) +   ggplot2::facet_grid(model ~ timeseries) +   cowplot::panel_border()  ## Hack to plot observed cases vs predicted plot_forecast_evaluation(   evaluations$forecast_cases,   obs_cases, c(7) ) +   ggplot2::facet_grid(model ~ timeseries, scales = \"free\") +   cowplot::panel_border() }"},{"path":"epiforecasts.io/EpiSoon/reference/draw_from_si_prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw from the Serial Interval Probability Distribution — draw_from_si_prob","title":"Draw from the Serial Interval Probability Distribution — draw_from_si_prob","text":"Draw Serial Interval Probability Distribution","code":""},{"path":"epiforecasts.io/EpiSoon/reference/draw_from_si_prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw from the Serial Interval Probability Distribution — draw_from_si_prob","text":"","code":"draw_from_si_prob(days_ago = NULL, serial_interval = NULL)"},{"path":"epiforecasts.io/EpiSoon/reference/draw_from_si_prob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw from the Serial Interval Probability Distribution — draw_from_si_prob","text":"days_ago Numeric vector days past. Defaults NULL. serial_interval numeric vector describing probability distribution serial interval. See EpiNow::covid_serial_interval example format.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/draw_from_si_prob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw from the Serial Interval Probability Distribution — draw_from_si_prob","text":"draw probability distribution serial interval.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/draw_from_si_prob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw from the Serial Interval Probability Distribution — draw_from_si_prob","text":"","code":"## Draw draw_from_si_prob(rev(c(1, 2, 4, 10, 1:100)), EpiSoon::example_serial_interval) #>                                                                                  #> 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  #>                                                                                  #> 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  #>                                                                                  #> 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  #>                                                                                  #> 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  #>                                                                                  #> 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  #>                                      14   12   11   10    9    8    7    6    5  #> 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.01 0.01 0.02 0.03 0.05 0.05 0.13 0.15  #>    4    3    2    1   10    4    2    1  #> 0.09 0.17 0.25 0.03 0.02 0.09 0.25 0.03"},{"path":"epiforecasts.io/EpiSoon/reference/evaluate_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a Model for Forecasting Rts — evaluate_model","title":"Evaluate a Model for Forecasting Rts — evaluate_model","text":"Evaluate Model Forecasting Rts","code":""},{"path":"epiforecasts.io/EpiSoon/reference/evaluate_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a Model for Forecasting Rts — evaluate_model","text":"","code":"evaluate_model(   obs_rts = NULL,   obs_cases = NULL,   model = NULL,   horizon = 7,   samples = 1000,   timeout = 30,   bound_rt = TRUE,   min_points = 3,   serial_interval = NULL,   rdist = NULL,   return_raw = FALSE )"},{"path":"epiforecasts.io/EpiSoon/reference/evaluate_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a Model for Forecasting Rts — evaluate_model","text":"obs_rts Dataframe Rt observations forecast score . contain date rt column. multiple samples included denoted using numeric sample variable. obs_cases Dataframe case observations use case prediction scoring. contain date cases column. multiple samples included denoted using numeric sample variable. model model object format bsts_model fable_model. See corresponding help files details. horizon Numeric, time horizon predict. samples Numeric, number samples take. timeout Numeric, timeout model fitting seconds. Defaults 30 seconds. bound_rt Logical, defaults TRUE. Rt values bounded greater equal 0. min_points Numeric, defaults 3. minimum number time points begin iteratively evaluating forecast. serial_interval numeric vector describing probability distribution serial interval. See EpiNow::covid_serial_interval example format. rdist function used sample number cases. Must take two arguments first specfying number samples second mean. Defaults rpois supplied return_raw Logical, raw cases rt forecasts returned. Defaults FALSE.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/evaluate_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a Model for Forecasting Rts — evaluate_model","text":"list tibbles containing predicted Rt values (forecast_rts), scores (rt_scores), well predicted cases (forecast_cases) scores (case_scores).","code":""},{"path":"epiforecasts.io/EpiSoon/reference/evaluate_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a Model for Forecasting Rts — evaluate_model","text":"","code":"if (FALSE) { ## Evaluate a model based on a single sample of input cases evaluate_model(EpiSoon::example_obs_rts,   EpiSoon::example_obs_cases,   model = function(...) {     EpiSoon::bsts_model(       model =         function(ss, y) {           bsts::AddSemilocalLinearTrend(ss, y = y)         }, ...     )   },   horizon = 7, samples = 10,   serial_interval = example_serial_interval )   ## Samples of observed data sampled_obs <- EpiSoon::example_obs_rts %>%   dplyr::mutate(sample = 1) %>%   dplyr::bind_rows(EpiSoon::example_obs_rts %>%     dplyr::mutate(sample = 2))  sampled_cases <- EpiSoon::example_obs_cases %>%   dplyr::mutate(sample = 1) %>%   dplyr::bind_rows(EpiSoon::example_obs_cases %>%     dplyr::mutate(sample = 2))   ## Evaluate a model across samples evaluate_model(sampled_obs,   sampled_cases,   model = function(...) {     EpiSoon::bsts_model(       model =         function(ss, y) {           bsts::AddSemilocalLinearTrend(ss, y = y)         }, ...     )   },   horizon = 7, samples = 10,   serial_interval = EpiSoon::example_serial_interval ) }"},{"path":"epiforecasts.io/EpiSoon/reference/example_obs_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Observed Cases — example_obs_cases","title":"Example Observed Cases — example_obs_cases","text":"example data frame observed cases","code":""},{"path":"epiforecasts.io/EpiSoon/reference/example_obs_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Observed Cases — example_obs_cases","text":"","code":"example_obs_cases"},{"path":"epiforecasts.io/EpiSoon/reference/example_obs_cases.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Observed Cases — example_obs_cases","text":"data frame containing cases reported date.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/example_obs_rts.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Observed Rts — example_obs_rts","title":"Example Observed Rts — example_obs_rts","text":"example data frame observed Reproduction numbers","code":""},{"path":"epiforecasts.io/EpiSoon/reference/example_obs_rts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Observed Rts — example_obs_rts","text":"","code":"example_obs_rts"},{"path":"epiforecasts.io/EpiSoon/reference/example_obs_rts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Observed Rts — example_obs_rts","text":"data frame containing Rts estimated date.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/example_serial_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Serial Interval — example_serial_interval","title":"Example Serial Interval — example_serial_interval","text":"example serial interval probability vector","code":""},{"path":"epiforecasts.io/EpiSoon/reference/example_serial_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Serial Interval — example_serial_interval","text":"","code":"example_serial_interval"},{"path":"epiforecasts.io/EpiSoon/reference/example_serial_interval.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Serial Interval — example_serial_interval","text":"vector giviing probability day","code":""},{"path":"epiforecasts.io/EpiSoon/reference/fable_model.html","id":null,"dir":"Reference","previous_headings":"","what":"fable Model Wrapper — fable_model","title":"fable Model Wrapper — fable_model","text":"Provides interface models fable package. Note feasts::ARIMA model requires feast package. future used fable require future.apply order silently fail.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/fable_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fable Model Wrapper — fable_model","text":"","code":"fable_model(y = NULL, samples = NULL, horizon = NULL, model = NULL)"},{"path":"epiforecasts.io/EpiSoon/reference/fable_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fable Model Wrapper — fable_model","text":"y Numeric vector time points forecast samples Numeric, number samples take. horizon Numeric, time horizon predict. model fable model object.  models use formula interface time can accessed using time.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/fable_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fable Model Wrapper — fable_model","text":"dataframe predictions (columns representing time horizon rows representing samples).","code":""},{"path":"epiforecasts.io/EpiSoon/reference/fable_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fable Model Wrapper — fable_model","text":"","code":"if (FALSE) { ## Used on its own fable_model(   y = EpiSoon::example_obs_rts[1:10, ]$rt,   model = fable::ARIMA(y ~ time),   samples = 10, horizon = 7 )   forecast_rt(EpiSoon::example_obs_rts[1:10, ],   model = function(...) {     fable_model(model = fable::ARIMA(y ~ time), ...)   },   horizon = 7, samples = 10 ) }"},{"path":"epiforecasts.io/EpiSoon/reference/forecastHybrid_model.html","id":null,"dir":"Reference","previous_headings":"","what":"forecastHybrid Model Wrapper — forecastHybrid_model","title":"forecastHybrid Model Wrapper — forecastHybrid_model","text":"Allows users forecast using ensembles forecastHybrid package. Note whilst weighted ensembles can created advised samples > 1 currently samples derived assuming normal distribution using upper lower confidence intervals ensemble. confidence intervals either based unweighted mean ensembled models maximum/minimum candiate models. Note forecastHybrid must installed model wrapper functional.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/forecastHybrid_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"forecastHybrid Model Wrapper — forecastHybrid_model","text":"","code":"forecastHybrid_model(   y = NULL,   samples = NULL,   horizon = NULL,   model_params = NULL,   forecast_params = NULL )"},{"path":"epiforecasts.io/EpiSoon/reference/forecastHybrid_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"forecastHybrid Model Wrapper — forecastHybrid_model","text":"y Numeric vector time points forecast samples Numeric, number samples take. horizon Numeric, time horizon predict. model_params List parameters pass forecastHybrid::hybridModel. forecast_params List parameters pass forecastHybrid:::forecast.hybridModel.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/forecastHybrid_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"forecastHybrid Model Wrapper — forecastHybrid_model","text":"dataframe predictions (columns representing time horizon rows representing samples).","code":""},{"path":"epiforecasts.io/EpiSoon/reference/forecastHybrid_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"forecastHybrid Model Wrapper — forecastHybrid_model","text":"","code":"if (FALSE) {  library(forecastHybrid)  ## Used on its own forecastHybrid_model(   y = EpiSoon::example_obs_rts$rt,   samples = 10, horizon = 7 )   ## Used with non-default arguments ## Note that with the current sampling from maximal confidence intervals model ## Weighting using cross-validation will only have an impact when 1 sample is used. forecastHybrid_model(   y = EpiSoon::example_obs_rts$rt,   samples = 1, horizon = 7,   model_params = list(     cvHorizon = 7, windowSize = 7,     rolling = TRUE, models = \"zeta\"   ) )   ## Used for forecasting forecast_rt(EpiSoon::example_obs_rts,   model = EpiSoon::forecastHybrid_model,   horizon = 7, samples = 1 )  ## Used for forcasting with non-default arguments forecast_rt(EpiSoon::example_obs_rts,   model = function(...) {     EpiSoon::forecastHybrid_model(       model_params = list(models = \"zte\"),       forecast_params = list(PI.combination = \"mean\"), ...     )   },   horizon = 7, samples = 10 ) }"},{"path":"epiforecasts.io/EpiSoon/reference/forecast_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Forecasts Cases for a Rt Forecasts — forecast_cases","title":"Forecasts Cases for a Rt Forecasts — forecast_cases","text":"Forecasts Cases Rt Forecasts","code":""},{"path":"epiforecasts.io/EpiSoon/reference/forecast_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forecasts Cases for a Rt Forecasts — forecast_cases","text":"","code":"forecast_cases(   cases = NULL,   fit_samples = NULL,   serial_interval = NULL,   forecast_date = NULL,   horizon = NULL,   rdist = NULL )"},{"path":"epiforecasts.io/EpiSoon/reference/forecast_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forecasts Cases for a Rt Forecasts — forecast_cases","text":"cases dataframe containing date cases variables fit_samples dataframe produced EpiSoon::forecast. serial_interval numeric vector describing probability distribution serial interval. See EpiNow::covid_serial_interval example format. forecast_date character string date (format \"yyyy-mm-dd\") indicating forecast date. Defaults NULL case assumed forecast date  day first date present fit_samples dataframe horizon Numeric, time horizon predict. rdist function used sample number cases. Must take two arguments first specfying number samples second mean. Defaults rpois supplied","code":""},{"path":"epiforecasts.io/EpiSoon/reference/forecast_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forecasts Cases for a Rt Forecasts — forecast_cases","text":"Forecast cases future forecast horizon","code":""},{"path":"epiforecasts.io/EpiSoon/reference/forecast_cases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forecasts Cases for a Rt Forecasts — forecast_cases","text":"","code":"if (FALSE) { ## Rt forecast forecast <- forecast_rt(EpiSoon::example_obs_rts[1:10, ],   model = function(...) {     EpiSoon::bsts_model(model = function(ss, y) {       bsts::AddAutoAr(ss, y = y, lags = 10)     }, ...)   },   horizon = 7, samples = 10 )   forecast_cases(EpiSoon::example_obs_cases,   fit_samples = forecast,   serial_interval = EpiSoon::example_serial_interval ) }"},{"path":"epiforecasts.io/EpiSoon/reference/forecast_cases_directly.html","id":null,"dir":"Reference","previous_headings":"","what":"Forecasts Cases Directly — forecast_cases_directly","title":"Forecasts Cases Directly — forecast_cases_directly","text":"Forecasts Cases Directly","code":""},{"path":"epiforecasts.io/EpiSoon/reference/forecast_cases_directly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forecasts Cases Directly — forecast_cases_directly","text":"","code":"forecast_cases_directly(   cases = NULL,   model,   horizon = 7,   samples = 1000,   bound_rt = TRUE,   timeout = 100 )"},{"path":"epiforecasts.io/EpiSoon/reference/forecast_cases_directly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forecasts Cases Directly — forecast_cases_directly","text":"cases dataframe containing date cases variables model model object format bsts_model fable_model. See corresponding help files details. horizon Numeric, time horizon predict. samples Numeric, number samples take. bound_rt Logical, defaults TRUE. Rt values bounded greater equal 0. timeout Numeric, timeout model fitting seconds. Defaults 30 seconds.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/forecast_cases_directly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forecasts Cases Directly — forecast_cases_directly","text":"Forecast cases future forecast horizon","code":""},{"path":"epiforecasts.io/EpiSoon/reference/forecast_cases_directly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forecasts Cases Directly — forecast_cases_directly","text":"","code":"if (FALSE) { forecast_cases_directly(EpiSoon::example_obs_cases,   model = function(...) {     EpiSoon::bsts_model(model = function(ss, y) {       bsts::AddAutoAr(ss, y = y, lags = 10)     }, ...)   },   horizon = 7, samples = 10 ) }"},{"path":"epiforecasts.io/EpiSoon/reference/forecast_model.html","id":null,"dir":"Reference","previous_headings":"","what":"forecast Model Wrapper — forecast_model","title":"forecast Model Wrapper — forecast_model","text":"Allows users forecast using models forecast package. Note forecast must installed model wrapper functional.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/forecast_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"forecast Model Wrapper — forecast_model","text":"","code":"forecast_model(y = NULL, samples = NULL, horizon = NULL, model = NULL, ...)"},{"path":"epiforecasts.io/EpiSoon/reference/forecast_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"forecast Model Wrapper — forecast_model","text":"y Numeric vector time points forecast samples Numeric, number samples take. horizon Numeric, time horizon predict. model forecast model object. ... pass arguments forecast models","code":""},{"path":"epiforecasts.io/EpiSoon/reference/forecast_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"forecast Model Wrapper — forecast_model","text":"dataframe predictions (columns representing time horizon rows representing samples).","code":""},{"path":"epiforecasts.io/EpiSoon/reference/forecast_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"forecast Model Wrapper — forecast_model","text":"","code":"if (FALSE) {  ## Used on its own forecast_model(   y = EpiSoon::example_obs_rts[1:10, ]$rt,   model = forecast::auto.arima,   samples = 10, horizon = 7 )  ## Used for forecasting forecast_rt(EpiSoon::example_obs_rts[1:10, ],   model = function(...) {     forecast_model(model = forecast::ets, ...)   },   horizon = 7, samples = 10 )  # run with non-default arguments forecast_rt(EpiSoon::example_obs_rts[1:10, ],   model = function(...) {     forecast_model(       model = forecast::ets,       damped = TRUE, ...     )   },   horizon = 7, samples = 10 )  models <- list(   \"ARIMA\" = function(...) {     forecast_model(model = forecast::auto.arima, ...)   },   \"ETS\" = function(...) {     forecast_model(model = forecast::ets, ...)   },   \"TBATS\" = function(...) {     forecast_model(model = forecast::tbats, ...)   } )  ## Compare models evaluations <- compare_models(EpiSoon::example_obs_rts,   EpiSoon::example_obs_cases, models,   horizon = 7, samples = 10,   serial_interval = example_serial_interval )  plot_forecast_evaluation(evaluations$forecast_rts,   EpiSoon::example_obs_rts,   horizon_to_plot = 7 ) +   ggplot2::facet_grid(~model) +   cowplot::panel_border() }"},{"path":"epiforecasts.io/EpiSoon/reference/forecast_rt.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit and Forecast using a Model — forecast_rt","title":"Fit and Forecast using a Model — forecast_rt","text":"Fit Forecast using Model","code":""},{"path":"epiforecasts.io/EpiSoon/reference/forecast_rt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit and Forecast using a Model — forecast_rt","text":"","code":"forecast_rt(   rts,   model,   horizon = 7,   samples = 1000,   bound_rt = TRUE,   timeout = 100 )"},{"path":"epiforecasts.io/EpiSoon/reference/forecast_rt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit and Forecast using a Model — forecast_rt","text":"rts dataframe containing two variables rt  date rt numeric date date. model model object format bsts_model fable_model. See corresponding help files details. horizon Numeric, time horizon predict. samples Numeric, number samples take. bound_rt Logical, defaults TRUE. Rt values bounded greater equal 0. timeout Numeric, timeout model fitting seconds. Defaults 30 seconds.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/forecast_rt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit and Forecast using a Model — forecast_rt","text":"dataframe samples containing following variables: sample, date, rt, horizon.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/forecast_rt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit and Forecast using a Model — forecast_rt","text":"","code":"if (FALSE) { forecast_rt(EpiSoon::example_obs_rts[1:10, ],   model = function(...) {     EpiSoon::bsts_model(model = function(ss, y) {       bsts::AddAutoAr(ss, y = y, lags = 10)     }, ...)   },   horizon = 7, samples = 10 ) }"},{"path":"epiforecasts.io/EpiSoon/reference/iterative_case_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Iteratively Forecast Cases Using an Iterative Rt Forecast — iterative_case_forecast","title":"Iteratively Forecast Cases Using an Iterative Rt Forecast — iterative_case_forecast","text":"Iteratively Forecast Cases Using Iterative Rt Forecast","code":""},{"path":"epiforecasts.io/EpiSoon/reference/iterative_case_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iteratively Forecast Cases Using an Iterative Rt Forecast — iterative_case_forecast","text":"","code":"iterative_case_forecast(   it_fit_samples = NULL,   cases = NULL,   serial_interval,   rdist = NULL )"},{"path":"epiforecasts.io/EpiSoon/reference/iterative_case_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iteratively Forecast Cases Using an Iterative Rt Forecast — iterative_case_forecast","text":"it_fit_samples Dataframe iterative forecasts produced iterative_rt_forecast. cases dataframe containing date cases variables serial_interval numeric vector describing probability distribution serial interval. See EpiNow::covid_serial_interval example format. rdist function used sample number cases. Must take two arguments first specfying number samples second mean. Defaults rpois supplied","code":""},{"path":"epiforecasts.io/EpiSoon/reference/iterative_case_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iteratively Forecast Cases Using an Iterative Rt Forecast — iterative_case_forecast","text":"dataframe iterative case forecasts","code":""},{"path":"epiforecasts.io/EpiSoon/reference/iterative_case_forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iteratively Forecast Cases Using an Iterative Rt Forecast — iterative_case_forecast","text":"","code":"if (FALSE) { ## Iterative Rt forecast it_forecast <-   iterative_rt_forecast(EpiSoon::example_obs_rts,     model = function(...) {       EpiSoon::bsts_model(         model =           function(ss, y) {             bsts::AddSemilocalLinearTrend(ss, y = y)           }, ...       )     },     horizon = 7, samples = 10   )   ## Iterative case forecast iterative_case_forecast(   it_fit_samples = it_forecast,   cases = EpiSoon::example_obs_cases,   serial_interval = EpiSoon::example_serial_interval ) }"},{"path":"epiforecasts.io/EpiSoon/reference/iterative_direct_case_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Iteratively forecast directly on cases — iterative_direct_case_forecast","title":"Iteratively forecast directly on cases — iterative_direct_case_forecast","text":"Iteratively forecast directly cases","code":""},{"path":"epiforecasts.io/EpiSoon/reference/iterative_direct_case_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iteratively forecast directly on cases — iterative_direct_case_forecast","text":"","code":"iterative_direct_case_forecast(   cases,   model = NULL,   horizon = 7,   samples = 1000,   timeout = 30,   bound_rt = TRUE,   min_points = 3 )"},{"path":"epiforecasts.io/EpiSoon/reference/iterative_direct_case_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iteratively forecast directly on cases — iterative_direct_case_forecast","text":"cases dataframe containing date cases variables model model object format bsts_model fable_model. See corresponding help files details. horizon Numeric, time horizon predict. samples Numeric, number samples take. timeout Numeric, timeout model fitting seconds. Defaults 30 seconds. bound_rt Logical, defaults TRUE. Rt values bounded greater equal 0. min_points Numeric, defaults 3. minimum number time points begin iteratively evaluating forecast.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/iterative_direct_case_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iteratively forecast directly on cases — iterative_direct_case_forecast","text":"tibble iterative forecasts","code":""},{"path":"epiforecasts.io/EpiSoon/reference/iterative_direct_case_forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iteratively forecast directly on cases — iterative_direct_case_forecast","text":"","code":"if (FALSE) { iterative_direct_case_forecast(EpiSoon::example_obs_cases,   model = function(...) {     EpiSoon::bsts_model(       model =         function(ss, y) {           bsts::AddSemilocalLinearTrend(ss, y = y)         }, ...     )   },   horizon = 7, samples = 10, min_points = 4 ) }"},{"path":"epiforecasts.io/EpiSoon/reference/iterative_rt_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Iteratively Forecast — iterative_rt_forecast","title":"Iteratively Forecast — iterative_rt_forecast","text":"Iteratively Forecast","code":""},{"path":"epiforecasts.io/EpiSoon/reference/iterative_rt_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iteratively Forecast — iterative_rt_forecast","text":"","code":"iterative_rt_forecast(   rts,   model = NULL,   horizon = 7,   samples = 1000,   timeout = 30,   bound_rt = TRUE,   min_points = 3 )"},{"path":"epiforecasts.io/EpiSoon/reference/iterative_rt_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iteratively Forecast — iterative_rt_forecast","text":"rts dataframe containing two variables rt  date rt numeric date date. model model object format bsts_model fable_model. See corresponding help files details. horizon Numeric, time horizon predict. samples Numeric, number samples take. timeout Numeric, timeout model fitting seconds. Defaults 30 seconds. bound_rt Logical, defaults TRUE. Rt values bounded greater equal 0. min_points Numeric, defaults 3. minimum number time points begin iteratively evaluating forecast.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/iterative_rt_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iteratively Forecast — iterative_rt_forecast","text":"tibble iterative forecasts","code":""},{"path":"epiforecasts.io/EpiSoon/reference/iterative_rt_forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iteratively Forecast — iterative_rt_forecast","text":"","code":"if (FALSE) { iterative_rt_forecast(EpiSoon::example_obs_rts,   model = function(...) {     EpiSoon::bsts_model(       model =         function(ss, y) {           bsts::AddSemilocalLinearTrend(ss, y = y)         }, ...     )   },   horizon = 7, samples = 10, min_points = 4 ) -> tmp }"},{"path":"epiforecasts.io/EpiSoon/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"epiforecasts.io/EpiSoon/reference/plot_compare_timeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary plots to compare timeseries and forecast models — plot_compare_timeseries","title":"Summary plots to compare timeseries and forecast models — plot_compare_timeseries","text":"Summary plots compare timeseries forecast models","code":""},{"path":"epiforecasts.io/EpiSoon/reference/plot_compare_timeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary plots to compare timeseries and forecast models — plot_compare_timeseries","text":"","code":"plot_compare_timeseries(   compare_timeseries_output,   type = c(\"summary_score\", \"horizon_score\", \"region_score\"),   score = c(\"Bias\", \"CRPS\", \"Dispersion\", \"AE (median)\", \"SE (mean)\") )"},{"path":"epiforecasts.io/EpiSoon/reference/plot_compare_timeseries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary plots to compare timeseries and forecast models — plot_compare_timeseries","text":"compare_timeseries_output named list dataframes produced compare_timeseries type Type(s) summary plot produced Rt case observations model n compare_timeseries_output. \"summary_score\" provides plot model fit scores 0-7 8-14 day horizons. desired, subset scores can specified using score argument. \"horizon_score\" provides plot scores (CRPS, Calibration, Sharpness, Median, IQR, CI, Bias) across horizons. \"region_score\" provides plot scores (CRPS, Calibration, Sharpness, Bias, Median, IQR) region 0-7 8-14 day horizons. score (Optional) One c(\"Bias\",\"CRPS\",\"Sharpness\",\"Calibration\",\"Median\",\"IQR\",\"CI\") type=\"summary_score\" used.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/plot_compare_timeseries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary plots to compare timeseries and forecast models — plot_compare_timeseries","text":"named list ggplot2 objects","code":""},{"path":"epiforecasts.io/EpiSoon/reference/plot_compare_timeseries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary plots to compare timeseries and forecast models — plot_compare_timeseries","text":"","code":"if (FALSE) { obs_rts <- EpiSoon::example_obs_rts %>%   dplyr::mutate(timeseries = \"Region 1\") %>%   dplyr::bind_rows(EpiSoon::example_obs_rts %>%     dplyr::mutate(timeseries = \"Region 2\"))  obs_cases <- EpiSoon::example_obs_cases %>%   dplyr::mutate(timeseries = \"Region 1\") %>%   dplyr::bind_rows(EpiSoon::example_obs_cases %>%     dplyr::mutate(timeseries = \"Region 2\"))  models <- list(   \"AR 3\" = function(...) {     EpiSoon::bsts_model(model = function(ss, y) {       bsts::AddAr(ss, y = y, lags = 3)     }, ...)   },   \"Semi-local linear trend\" = function(...) {     EpiSoon::bsts_model(model = function(ss, y) {       bsts::AddSemilocalLinearTrend(ss, y = y)     }, ...)   } )  forecast_eval <-   compare_timeseries(obs_rts, obs_cases, models,     horizon = 10, samples = 10,     serial_interval = EpiSoon::example_serial_interval   )  ## Produce all plots plot_compare_timeseries(forecast_eval)  ## Produce subsets of plots plot_compare_timeseries(forecast_eval, type = \"summary_score\") plot_compare_timeseries(forecast_eval,   type = \"summary_score\",   score = \"Bias\" ) plot_compare_timeseries(forecast_eval, type = \"horizon_score\") plot_compare_timeseries(forecast_eval, type = \"region_score\") plot_compare_timeseries(forecast_eval,   type = c(\"horizon_score\", \"region_score\") ) }"},{"path":"epiforecasts.io/EpiSoon/reference/plot_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Forecast — plot_forecast","title":"Plot a Forecast — plot_forecast","text":"Plot Forecast","code":""},{"path":"epiforecasts.io/EpiSoon/reference/plot_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Forecast — plot_forecast","text":"","code":"plot_forecast(   forecast = NULL,   observations = NULL,   horizon_cutoff = NULL,   obs_cutoff_at_forecast = TRUE )"},{"path":"epiforecasts.io/EpiSoon/reference/plot_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Forecast — plot_forecast","text":"forecast dataframe summarised forecasts produced summarise_forecast summarise_case_forecast . observations dataframe observations containing following variables: either rt cases date. horizon_cutoff Numeric, defaults NULL. Forecast horizon plot . obs_cutoff_at_forecast Logical defaults TRUE. observations shown date forecast.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/plot_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Forecast — plot_forecast","text":"ggplot2 object","code":""},{"path":"epiforecasts.io/EpiSoon/reference/plot_forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Forecast — plot_forecast","text":"","code":"if (FALSE) { ## Forecast an Rt sample samples <- forecast_rt(EpiSoon::example_obs_rts[1:10, ],   model = function(...) {     EpiSoon::bsts_model(       model =         function(ss, y) {           bsts::AddSemilocalLinearTrend(ss, y = y)         }, ...     )   },   horizon = 21, samples = 10 )  ## Summarise forecast summarised_forecast <- summarise_forecast(samples)  ## Plot forecast_cases plot_forecast(summarised_forecast, EpiSoon::example_obs_rts)  ## Forecast a case sample pred_cases <- forecast_cases(EpiSoon::example_obs_cases, samples,   serial_interval = EpiSoon::example_serial_interval )  summarised_case_forecast <- summarise_case_forecast(pred_cases)  plot_forecast(summarised_case_forecast, EpiSoon::example_obs_cases) }"},{"path":"epiforecasts.io/EpiSoon/reference/plot_forecast_evaluation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Forecast — plot_forecast_evaluation","title":"Plot a Forecast — plot_forecast_evaluation","text":"Plot Forecast","code":""},{"path":"epiforecasts.io/EpiSoon/reference/plot_forecast_evaluation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Forecast — plot_forecast_evaluation","text":"","code":"plot_forecast_evaluation(   forecasts = NULL,   observations = NULL,   horizon_to_plot = 1 )"},{"path":"epiforecasts.io/EpiSoon/reference/plot_forecast_evaluation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Forecast — plot_forecast_evaluation","text":"forecasts dataframe produced forecast_rt forecast_cases observations dataframe observations containing following variables: either rt cases date. horizon_to_plot Numeric vector, forecast horizon plot.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/plot_forecast_evaluation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Forecast — plot_forecast_evaluation","text":"ggplot2 object","code":""},{"path":"epiforecasts.io/EpiSoon/reference/plot_forecast_evaluation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Forecast — plot_forecast_evaluation","text":"","code":"if (FALSE) { ## Evaluate a model forecast_eval <- evaluate_model(EpiSoon::example_obs_rts,   EpiSoon::example_obs_cases,   model = function(...) {     EpiSoon::bsts_model(       model =         function(ss, y) {           bsts::AddSemilocalLinearTrend(ss, y = y)         }, ...     )   },   serial_interval = EpiSoon::example_serial_interval,   horizon = 7, samples = 10 )  ## Plot Rt forecast plot_forecast_evaluation(forecast_eval$forecast_rts,   EpiSoon::example_obs_rts,   horizon_to_plot = 7 )   ## Plot case forecast plot_forecast_evaluation(forecast_eval$forecast_cases,   EpiSoon::example_obs_cases,   horizon_to_plot = 7 ) }"},{"path":"epiforecasts.io/EpiSoon/reference/plot_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot forecast scores — plot_scores","title":"Plot forecast scores — plot_scores","text":"Plot forecast scores","code":""},{"path":"epiforecasts.io/EpiSoon/reference/plot_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot forecast scores — plot_scores","text":"","code":"plot_scores()"},{"path":"epiforecasts.io/EpiSoon/reference/plot_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot forecast scores — plot_scores","text":"dataframe summarised scores tidy format.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/predict_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict cases for a single Rt sample forecasts — predict_cases","title":"Predict cases for a single Rt sample forecasts — predict_cases","text":"Predict cases single Rt sample forecasts","code":""},{"path":"epiforecasts.io/EpiSoon/reference/predict_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict cases for a single Rt sample forecasts — predict_cases","text":"","code":"predict_cases(   cases = NULL,   rts = NULL,   serial_interval = NULL,   forecast_date = NULL,   horizon = NULL,   rdist = NULL )"},{"path":"epiforecasts.io/EpiSoon/reference/predict_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict cases for a single Rt sample forecasts — predict_cases","text":"cases dataframe containing date cases variables rts dataframe containing two variables rt  date rt numeric date date. serial_interval numeric vector describing probability distribution serial interval. See EpiNow::covid_serial_interval example format. forecast_date character string date (format \"yyyy-mm-dd\") indicating forecast date. Defaults NULL case assumed forecast date last data present cases dataframe horizon Numeric, time horizon predict. rdist function used sample number cases. Must take two arguments first specfying number samples second mean. Defaults rpois supplied","code":""},{"path":"epiforecasts.io/EpiSoon/reference/predict_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict cases for a single Rt sample forecasts — predict_cases","text":"Forecast cases future forecast horizon","code":""},{"path":"epiforecasts.io/EpiSoon/reference/predict_cases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict cases for a single Rt sample forecasts — predict_cases","text":"","code":"forecast <- forecast_rt(EpiSoon::example_obs_rts[1:10, ],   model = function(...) {     EpiSoon::bsts_model(       model =         function(ss, y) {           bsts::AddSemilocalLinearTrend(ss, y = y)         }, ...     )   },   horizon = 7, samples = 1 )   purrr::map_dfr(1:100, ~ predict_cases(   cases = EpiSoon::example_obs_cases,   rts = forecast,   forecast_date = as.Date(\"2020-03-10\"),   serial_interval = example_serial_interval )) %>%   dplyr::group_by(date) %>%   dplyr::summarise(cases = mean(cases)) #> # A tibble: 7 × 2 #>   date       cases #>   <date>     <dbl> #> 1 2020-03-11  174. #> 2 2020-03-12  198  #> 3 2020-03-13  232. #> 4 2020-03-14  268. #> 5 2020-03-15  312. #> 6 2020-03-16  361. #> 7 2020-03-17  406."},{"path":"epiforecasts.io/EpiSoon/reference/predict_current_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict cases for Rts based on observed data — predict_current_cases","title":"Predict cases for Rts based on observed data — predict_current_cases","text":"Predict cases Rts based observed data","code":""},{"path":"epiforecasts.io/EpiSoon/reference/predict_current_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict cases for Rts based on observed data — predict_current_cases","text":"","code":"predict_current_cases(   cases = NULL,   rts = NULL,   serial_interval = NULL,   rdist = NULL )"},{"path":"epiforecasts.io/EpiSoon/reference/predict_current_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict cases for Rts based on observed data — predict_current_cases","text":"cases dataframe containing date cases variables rts dataframe containing two variables rt  date rt numeric date date. serial_interval numeric vector describing probability distribution serial interval. See EpiNow::covid_serial_interval example format. rdist function used sample number cases. Must take two arguments first specfying number samples second mean. Defaults rpois supplied","code":""},{"path":"epiforecasts.io/EpiSoon/reference/predict_current_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict cases for Rts based on observed data — predict_current_cases","text":"Forecast cases current timestep","code":""},{"path":"epiforecasts.io/EpiSoon/reference/predict_current_cases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict cases for Rts based on observed data — predict_current_cases","text":"","code":"purrr::map_dfr(1:100, ~ predict_current_cases(   cases = EpiSoon::example_obs_cases,   rts = EpiSoon::example_obs_rts,   serial_interval = EpiSoon::example_serial_interval )) %>%   dplyr::group_by(date) %>%   dplyr::summarise(cases = mean(cases)) #> # A tibble: 22 × 2 #>    date       cases #>    <date>     <dbl> #>  1 2020-03-01  34.6 #>  2 2020-03-02  42.5 #>  3 2020-03-03  51.1 #>  4 2020-03-04  59.0 #>  5 2020-03-05  69.6 #>  6 2020-03-06  81.0 #>  7 2020-03-07  93.6 #>  8 2020-03-08 110.  #>  9 2020-03-09 129.  #> 10 2020-03-10 146.  #> # … with 12 more rows"},{"path":"epiforecasts.io/EpiSoon/reference/score_case_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Score a case forecast — score_case_forecast","title":"Score a case forecast — score_case_forecast","text":"Score case forecast","code":""},{"path":"epiforecasts.io/EpiSoon/reference/score_case_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score a case forecast — score_case_forecast","text":"","code":"score_case_forecast(pred_cases, obs_cases, scores = \"all\")"},{"path":"epiforecasts.io/EpiSoon/reference/score_case_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score a case forecast — score_case_forecast","text":"pred_cases Dataframe predicted cases following variables: sample, date, cases forecast horizon. produced forecast_cases. obs_cases Dataframe observed cases following variables: date cases. scores Character vector defaulting \"\". Select scores return, default scores subset can returned.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/score_case_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score a case forecast — score_case_forecast","text":"dataframe containing following scores per forecast timepoint: dss, crps, logs, bias, sharpness well forecast date time horizon.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/score_case_forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score a case forecast — score_case_forecast","text":"","code":"if (FALSE) { ## Fit a model (using a subset of observations) samples <- forecast_rt(EpiSoon::example_obs_rts[1:10, ],   model = function(...) {     EpiSoon::bsts_model(       model =         function(ss, y) {           bsts::AddSemilocalLinearTrend(ss, y = y)         }, ...     )   },   horizon = 7, samples = 10 )  pred_cases <- forecast_cases(   EpiSoon::example_obs_cases,   samples, EpiSoon::example_serial_interval )  ## Score the model fit (with observations during the time horizon of the forecast) score_case_forecast(pred_cases, EpiSoon::example_obs_cases)   ## Score the model fit (with observations during the time horizon of the forecast) score_case_forecast(pred_cases, EpiSoon::example_obs_cases, scores = c(\"crps\", \"sharpness\", \"bias\")) }"},{"path":"epiforecasts.io/EpiSoon/reference/score_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Score a Model Fit — score_forecast","title":"Score a Model Fit — score_forecast","text":"Score Model Fit","code":""},{"path":"epiforecasts.io/EpiSoon/reference/score_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score a Model Fit — score_forecast","text":"","code":"score_forecast(fit_samples, observations, scores = \"all\")"},{"path":"epiforecasts.io/EpiSoon/reference/score_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score a Model Fit — score_forecast","text":"fit_samples dataframe produced EpiSoon::forecast. observations dataframe observations score. contain date rt column. scores Character vector defaulting \"\". Select scores return, default scores subset can returned.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/score_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score a Model Fit — score_forecast","text":"dataframe containing following scores per forecast timepoint: dss, crps, logs, bias, sharpness well forecast date time horizon.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/score_forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score a Model Fit — score_forecast","text":"","code":"if (FALSE) { ## Fit a model (using a subset of observations) samples <- forecast_rt(EpiSoon::example_obs_rts[1:10, ],   model = function(...) {     EpiSoon::bsts_model(       model =         function(ss, y) {           bsts::AddSemilocalLinearTrend(ss, y = y)         }, ...     )   },   horizon = 7, samples = 10 )  ## Score the model fit (with observations during the time horizon of the forecast) score_forecast(samples, EpiSoon::example_obs_rts)  ## Return just CRPS, bias and sharpness score_forecast(samples, EpiSoon::example_obs_rts, scores = c(\"crps\", \"sharpness\", \"bias\"))  ## Return just the CRPS score_forecast(samples, EpiSoon::example_obs_rts, scores = \"crps\") }"},{"path":"epiforecasts.io/EpiSoon/reference/stackr_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack Models According to CRPS — stackr_model","title":"Stack Models According to CRPS — stackr_model","text":"Provides wrapper different EpiSoon model wrappers generates mixture model models based (Continuous) Rank Probability Score list models supplied. models fit data period observations size weighting_period. Forecasts generated models time points weighting_period. Predictive samples generated individual models used create model weights ensemble based CRPS. models refitted entire timeseries predictions generated models. Draws individual model predictive samples used generate mixture model weights obtained previous step. weights computed using crps_weights package stackr minimise CRPS. function mixture_from_samples package used draw samples individual models form mixture models.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/stackr_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack Models According to CRPS — stackr_model","text":"","code":"stackr_model(   y = NULL,   models = NULL,   samples = NULL,   horizon = NULL,   weighting_period = 5,   verbose = TRUE )"},{"path":"epiforecasts.io/EpiSoon/reference/stackr_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack Models According to CRPS — stackr_model","text":"y Numeric vector time points forecast models list models. Models must analogous form function(...){EpiSoon::fable_model(model = , ...)} function(...){EpiSoon::bsts_model(model = , ...)}. samples Numeric, number samples take. horizon Numeric, time horizon predict. weighting_period number recent timepoints hold generate weights mixture model verbose TRUE, gives message number observations small crps weighting","code":""},{"path":"epiforecasts.io/EpiSoon/reference/stackr_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stack Models According to CRPS — stackr_model","text":"dataframe predictions (columns representing time horizon rows representing samples).","code":""},{"path":"epiforecasts.io/EpiSoon/reference/stackr_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stack Models According to CRPS — stackr_model","text":"","code":"if (FALSE) {  # make list with models models <- list(   \"ARIMA\" = function(...) {     EpiSoon::fable_model(model = fable::ARIMA(y), ...)   },   \"ETS\" = function(...) {     EpiSoon::fable_model(model = fable::ETS(y), ...)   },   \"Drift\" = function(...) {     EpiSoon::fable_model(model = fable::RW(y ~ drift()), ...)   } )  # make forecast on its own forecast <- stackr_model(   y = EpiSoon::example_obs_rts[1:10, ]$rt,   models = models,   samples = 10,   horizon = 7,   weighting_period = 5 )   # together with forecast_rt fc_rt <- forecast_rt(EpiSoon::example_obs_rts[1:10, ],   model = function(...) {     stackr_model(       models = models,       weighting_period = 5,       ...     )   },   samples = 10,   horizon = 7 )  forecast_eval <- evaluate_model(EpiSoon::example_obs_rts,   EpiSoon::example_obs_cases,   model = function(...) {     stackr_model(       models = models,       weighting_period = 5,       ...     )   },   horizon = 7, samples = 10,   serial_interval = example_serial_interval,   min_points = 10 )  plot_forecast_evaluation(forecast_eval$forecast_rts,   EpiSoon::example_obs_rts,   horizon_to_plot = 7 ) }"},{"path":"epiforecasts.io/EpiSoon/reference/summarise_case_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise Forecast Cases — summarise_case_forecast","title":"Summarise Forecast Cases — summarise_case_forecast","text":"Summarise Forecast Cases","code":""},{"path":"epiforecasts.io/EpiSoon/reference/summarise_case_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise Forecast Cases — summarise_case_forecast","text":"","code":"summarise_case_forecast(pred_cases)"},{"path":"epiforecasts.io/EpiSoon/reference/summarise_case_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise Forecast Cases — summarise_case_forecast","text":"pred_cases dataframe produced EpiSoon::forecast_cases.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/summarise_case_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise Forecast Cases — summarise_case_forecast","text":"summarised dataframe.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/summarise_case_forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise Forecast Cases — summarise_case_forecast","text":"","code":"if (FALSE) { ## Example forecast forecast <- forecast_rt(EpiSoon::example_obs_rts,   model = function(...) {     EpiSoon::bsts_model(       model =         function(ss, y) {           bsts::AddSemilocalLinearTrend(ss, y = y)         }, ...     )   },   horizon = 7, samples = 10 )  ## Forecast cases case_forecast <- forecast_cases(   EpiSoon::example_obs_cases,   forecast,   EpiSoon::example_serial_interval ) ## Summarise case forecast summarise_case_forecast(case_forecast) }"},{"path":"epiforecasts.io/EpiSoon/reference/summarise_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise Forecast Rts — summarise_forecast","title":"Summarise Forecast Rts — summarise_forecast","text":"Summarise Forecast Rts","code":""},{"path":"epiforecasts.io/EpiSoon/reference/summarise_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise Forecast Rts — summarise_forecast","text":"","code":"summarise_forecast(fit_samples)"},{"path":"epiforecasts.io/EpiSoon/reference/summarise_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise Forecast Rts — summarise_forecast","text":"fit_samples dataframe produced EpiSoon::forecast.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/summarise_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise Forecast Rts — summarise_forecast","text":"summarised dataframe.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/summarise_forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise Forecast Rts — summarise_forecast","text":"","code":"if (FALSE) { samples <- forecast_rt(example_obs_rts,   model = function(...) {     EpiSoon::bsts_model(       model =         function(ss, y) {           bsts::AddSemilocalLinearTrend(ss, y = y)         }, ...     )   },   horizon = 7, samples = 10 )   summarise_forecast(samples) }"},{"path":"epiforecasts.io/EpiSoon/reference/summarise_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise model forecasting scores — summarise_scores","title":"Summarise model forecasting scores — summarise_scores","text":"Summarise model forecasting scores","code":""},{"path":"epiforecasts.io/EpiSoon/reference/summarise_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise model forecasting scores — summarise_scores","text":"","code":"summarise_scores(scores, variables = NULL, sel_scores = NULL)"},{"path":"epiforecasts.io/EpiSoon/reference/summarise_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise model forecasting scores — summarise_scores","text":"scores dataframe model scores produced score_model variables character vector variables names group . default score type model grouped present. sel_scores character vector indicating scores return information . Defaults scores","code":""},{"path":"epiforecasts.io/EpiSoon/reference/summarise_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise model forecasting scores — summarise_scores","text":"dataframe summarised scores tidy format.","code":""},{"path":"epiforecasts.io/EpiSoon/reference/summarise_scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise model forecasting scores — summarise_scores","text":"","code":"if (FALSE) { ## Example cases cases <- EpiSoon::example_obs_cases %>%   dplyr::mutate(timeseries = \"Region 1\") %>%   dplyr::bind_rows(EpiSoon::example_obs_cases %>%     dplyr::mutate(timeseries = \"Region 2\"))   ## Example Rts rts <- EpiSoon::example_obs_rts %>%   dplyr::mutate(timeseries = \"Region 1\") %>%   dplyr::bind_rows(EpiSoon::example_obs_rts %>%     dplyr::mutate(timeseries = \"Region 2\"))  ## List of forecasting bsts models wrapped in functions. models <- list(   \"AR 3\" =     function(...) {       EpiSoon::bsts_model(         model =           function(ss, y) {             bsts::AddAr(ss, y = y, lags = 3)           }, ...       )     },   \"Semi-local linear trend\" =     function(...) {       EpiSoon::bsts_model(         model =           function(ss, y) {             bsts::AddSemilocalLinearTrend(ss, y = y)           }, ...       )     } )   ## Compare models evaluations <- compare_timeseries(rts, cases, models,   horizon = 7, samples = 10,   serial_interval = example_serial_interval )    ## Score across the default groups summarise_scores(evaluations$rt_scores)   ## Also summarise across time horizon summarise_scores(evaluations$rt_scores, \"horizon\", sel_scores = \"crps\")  ## Instead summarise across region and summarise case scores summarise_scores(evaluations$case_scores, \"timeseries\", sel_scores = \"logs\") }"},{"path":"epiforecasts.io/EpiSoon/news/index.html","id":"episoon-031","dir":"Changelog","previous_headings":"","what":"EpiSoon 0.3.1","title":"EpiSoon 0.3.1","text":"maintenance release updates package CI use functions depreciated since least release 2020. also includes range changes missed previous releases. Thanks @nikosbosse, @andreamra, @tuxette, @sbfnk, @seabbs code contributions towards release. Updated GitHub Actions Updated tidyverse code usage account depreciation. Updated pkgdown site use pkgdown 2.0.0. Updated uses size linewidth account depreciation ggplot2 line geoms.","code":""},{"path":"epiforecasts.io/EpiSoon/news/index.html","id":"episoon-030","dir":"Changelog","previous_headings":"","what":"EpiSoon 0.3.0","title":"EpiSoon 0.3.0","text":"Reviewed updated tooling examples Added documentation Bugs squashed.","code":""},{"path":"epiforecasts.io/EpiSoon/news/index.html","id":"episoon-020","dir":"Changelog","previous_headings":"","what":"EpiSoon 0.2.0","title":"EpiSoon 0.2.0","text":"Added NEWS.md file track changes package. Added dev support multiple samples evaluate_model higher order functions. Note user expected manage lower level functions. Renamed models reflect forecasting fitting. Updated docs reflect changes. Added case prediction scoring framework","code":""}]
