% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compare_timeseries.R
\name{compare_timeseries}
\alias{compare_timeseries}
\title{Compare timeseries and forecast models}
\usage{
compare_timeseries(
  observations = NULL,
  models = NULL,
  horizon = 7,
  samples = 1000,
  bound_rt = TRUE,
  timeout = 30
)
}
\arguments{
\item{observations}{A dataframe of observations including a \code{timeseries} variable to denote
each timeseris and a  \code{rt} vector (to forecast) and a \code{date} vector (to denote time). Optionally this dataframe can
contain samples for each timeseries in which case this should be denoted using a \code{sample} variable.}

\item{models}{A list of \code{bsts} models. An example configuration is given in the
examples. Each \code{bsts} model needs to be wrapped in a function that takes a \code{ss} and \code{y}
argument (i.e. \code{function(ss, y){bsts::AddSemilocalLinearTrend(ss, y = y)}}).}

\item{horizon}{Numeric, the time horizon over which to predict}

\item{samples}{Numeric, the number of samples to from the posterior of the model
fit. Note that twice this number of MCMC steps will be taken with half used as burn in.}

\item{bound_rt}{Logical, defaults to \code{TRUE}. Should Rt values be bounded to be greater than or
equal to 0.}

\item{timeout}{Numeric, the number of seconds to allow before terminating model fitting. Defaults to
30 seconds.}
}
\value{
A list of dataframes as produced by \verb{evaluate model} but with an additional model column.
}
\description{
Compare timeseries and forecast models
}
\examples{

## Dummy data
observations <- data.frame(rt = 1:20,
                            date = as.Date("2020-01-01")
                           + lubridate::days(1:20))

observations <- observations \%>\%
    dplyr::mutate(timeseries = "Region 1") \%>\%
    dplyr::bind_rows(observations \%>\%
    dplyr::mutate(timeseries = "Region 2"))

## List of forecasting bsts models wrapped in functions.
models <- list("Sparse AR" =
                    function(ss, y){bsts::AddAutoAr(ss, y = y, lags = 7)},
               "Semi-local linear trend" =
                    function(ss, y){bsts::AddSemilocalLinearTrend(ss, y = y)})



## Compare models
evaluations <- compare_timeseries(observations, models,
                                  horizon = 7, samples = 10)

evaluations

## Example evaluation plot for comparing forecasts
## with actuals for a range of models and timeseries.
plot_forecast_evaluation(evaluations$forecast, observations, c(7)) +
  ggplot2::facet_grid(model ~ timeseries) +
  cowplot::panel_border()

}
